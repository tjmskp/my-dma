// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  adAccounts    AdAccount[]
  campaigns     Campaign[]
  mediaAssets   MediaAsset[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdAccount {
  id        String   @id @default(cuid())
  platform  String
  accountId String
  name      String
  status    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns Campaign[]

  @@unique([platform, accountId])
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  objective   String
  status      String
  budget      Float
  startDate   DateTime
  endDate     DateTime?
  adAccountId String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  adAccount  AdAccount   @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  adCreatives AdCreative[]
}

model AdCreative {
  id          String   @id @default(cuid())
  name        String
  headline    String
  description String?
  callToAction String?
  campaignId  String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  campaign    Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  mediaAssets MediaAssetOnAdCreative[]
}

model MediaAsset {
  id          String   @id @default(cuid())
  name        String
  type        String
  url         String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  adCreatives MediaAssetOnAdCreative[]
}

model MediaAssetOnAdCreative {
  mediaAssetId String
  adCreativeId String
  createdAt    DateTime @default(now())

  mediaAsset   MediaAsset  @relation(fields: [mediaAssetId], references: [id], onDelete: Cascade)
  adCreative   AdCreative  @relation(fields: [adCreativeId], references: [id], onDelete: Cascade)

  @@id([mediaAssetId, adCreativeId])
} 